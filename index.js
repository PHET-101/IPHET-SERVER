const express = require("express");
const mysql = require("mysql2");
const cors = require("cors");
const jwt = require("jsonwebtoken");
const bcrypt = require("bcrypt");
const axios = require("axios");
const cookieParser = require("cookie-parser");
const nodemailer = require("nodemailer");
const twvoucher = require("@fortune-inc/tw-voucher");
const FormData = require("form-data");
const fs = require("fs");
const path = require("path");
const multer = require("multer");
require("dotenv").config();

const upload = multer({ dest: "uploads/" });
const app = express();
app.use(express.json());
app.use(cookieParser());
app.use(
  cors({
    origin: "https://iphet-store.web.app",
    methods: ["POST", "GET", "DELETE"],
    credentials: true,
  })
);

const saltRounds = parseInt(process.env.SALT_ROUNDS); 
const db = mysql.createConnection({
  host: process.env.DB_HOST || "sql12.freesqldatabase.com",
  user: process.env.DB_USER || "sql12727096",
  password: process.env.DB_PASSWORD || "QGwTusbwM5",
  database: process.env.DB_NAME || "sql12727096",
});

db.connect((err) => {
  if (err) {
    console.error("Error connecting to the database:", err);
    process.exit(1);
  }
});

/* Register */

const profilePictures = [
  "/src/assets/images/profile/profile-01.jpg",
  "/src/assets/images/profile/profile-02.jpg",
  "/src/assets/images/profile/profile-03.jpg",
  "/src/assets/images/profile/profile-04.jpg",
  "/src/assets/images/profile/profile-05.jpg",
  "/src/assets/images/profile/profile-06.jpg",
  "/src/assets/images/profile/profile-07.jpg",
  "/src/assets/images/profile/profile-08.jpg",
  "/src/assets/images/profile/profile-10.jpg",
];

app.post("/signup", async (req, res) => {
  let { usernameNew, emailNew, passwordNew, confirmPassword, termsAgreed } = req.body;
  const urole = "User";

  // Convert to lowercase
  const username = usernameNew ? usernameNew.toLowerCase() : '';
  const email = emailNew ? emailNew.toLowerCase() : '';

  try {
    // Validate input
    if (!username || !email || !passwordNew || !confirmPassword || !termsAgreed) {
      return res.status(400).json({
        type: "error",
        message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡∏∞‡∏¢‡∏≠‡∏°‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏ï‡∏Å‡∏•‡∏á",
      });
    }

    if (passwordNew !== confirmPassword) {
      return res.status(400).json({
        type: "error",
        message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
      });
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        type: "error",
        message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      });
    }

    // Check if username or email already exists
    const [existingUsers] = await db.promise().query(
      "SELECT * FROM users WHERE username = ? OR email = ?",
      [username, email]
    );

    if (existingUsers.length > 0) {
      const existingUser = existingUsers.find(
        (user) => user.username === username || user.email === email
      );
      if (existingUser) {
        if (existingUser.username === username) {
          return res.status(409).json({
            type: "error",
            message: "Username ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
          });
        }
        if (existingUser.email === email) {
          return res.status(409).json({
            type: "error",
            message: "Email ‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
          });
        }
      }
    }

    // Create new user
    const selectedProfile = profilePictures[Math.floor(Math.random() * profilePictures.length)];
    const hashedPassword = await bcrypt.hash(passwordNew, saltRounds);

    await db.promise().query(
      "INSERT INTO users (profile, username, email, password, urole) VALUES (?, ?, ?, ?, ?)",
      [selectedProfile, username, email, hashedPassword, urole]
    );

    // Send Discord notification
    axios.post(process.env.DISCORD_WEBHOOK_SIGNUP, {
      embeds: [
        {
          title: "üéâ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà!",
          description: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏´‡∏°‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏≠‡∏á‡πÄ‡∏£‡∏≤ üéä",
          color: 0x00ff00,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏°‡∏±‡∏Ñ‡∏£",
              value: `\`\`\`
Username: ${username}
Email: ${email}
Time: ${new Date().toLocaleString('th-TH', { timeZone: 'Asia/Bangkok' })}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(error => {
      console.error("Error sending Discord notification:", error);
    });

    return res.status(201).json({
      type: "success",
      message: "‡∏•‡∏á‡∏ó‡∏∞‡πÄ‡∏ö‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô",
    });

  } catch (error) {
    console.error(error);
    return res.status(500).json({
      type: "error",
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
    });
  }
});

/* Login */

const authenticateToken = (req, res, next) => {
  const token = req.header("Authorization");
  if (!token) return res.status(401).send("Access Denied");

  try {
    const verified = jwt.verify(token, process.env.JWT_SECRET);
    req.user = { username: verified.username };
    next();
  } catch (err) {
    res.status(401).send("Invalid or Expired Token");
  }
};

app.get("/protected", authenticateToken, (req, res) => {
  db.query(
    "SELECT * FROM users WHERE username = ?",
    [req.user.username],
    async (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      if (results.length === 0) {
        return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
      }
      const user = results[0];
      res.status(200).json({ type: "success", message: "success", user });
    }
  );
});


app.post("/signin", async (req, res) => {
  const { username, password, rememberMe } = req.body;

  try {
    if (!username || !password) {
      return res.status(400).json({
        type: "error", message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
      });
    }

    db.query(
      "SELECT * FROM users WHERE username = ?",
      [username],
      async (error, results) => {
        if (error) {
          console.error(error);
          await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
            embeds: [
              {
                title: "üî¥ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                description: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                color: 0xff0000,
                fields: [
                  {
                    name: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
                    value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}
\`\`\``,
                  },
                ],
                footer: {
                  text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                },
                timestamp: new Date(),
              },
            ],
          });
          return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }
        if (results.length === 0) {
          await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
            embeds: [
              {
                title: "üî¥ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                description: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                color: 0xff0000,
                fields: [
                  {
                    name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                    value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
\`\`\``,
                  },
                ],
                footer: {
                  text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                },
                timestamp: new Date(),
              },
            ],
          });
          return res
            .status(401)
            .json({ type: "error", message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const user = results[0];
        const isPasswordValid = await bcrypt.compare(password, user.password);

        if (!isPasswordValid) {
          await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
            embeds: [
              {
                title: "üî¥ ‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
                description: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
                color: 0xff0000,
                fields: [
                  {
                    name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                    value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: ‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
\`\`\``,
                  },
                ],
                footer: {
                  text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
                },
                timestamp: new Date(),
              },
            ],
          });
          return res
            .status(401)
            .json({ type: "error", message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const token = jwt.sign(
          { username: user.username },
          process.env.JWT_SECRET,
          { expiresIn: rememberMe ? "7d" : "1d" }
        );

        // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
          embeds: [
            {
              title: "üü¢ ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
              description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
              color: 0x00ff00,
              fields: [
                {
                  name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ",
                  value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
Token: ${token}
\`\`\``,
                },
              ],
              footer: {
                text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
              },
              timestamp: new Date(),
            },
          ],
        });

        res.status(200).json({ type: "success", message: "‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", token });
      }
    );
  } catch (error) {
    console.error(error);
    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
      embeds: [
        {
          title: "üî¥ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ",
          description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          color: 0xff0000,
          fields: [
            {
              name: "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
              value: `\`\`\`
‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}
\`\`\``,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö",
          },
          timestamp: new Date(),
        },
      ],
    });
    return res.status(500).json({ type: "error", message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö" });
  }
});

/* Forgot Password */

app.post("/forgot", async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: "Email is required" });
  }

  const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
  if (!emailRegex.test(email)) {
    return res.status(400).json({ type: "error", message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }

  const token = jwt.sign(
    { email },
    process.env.JWT_SECRET_FORGOT,
    { expiresIn: "1h" }
  );

  try {
    await sendResetEmail(email, token);

    // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á
    await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
      embeds: [
        {
          title: "üîë ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          description: "‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà",
          color: 0x00ffff,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${email}
Token: ${token}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          },
          timestamp: new Date(),
        },
      ],
    });

    return res.status(200).json({ type: "success", message: "Email sent successfully" });
  } catch (error) {
    console.error("Error sending email:", error);
    await axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
      embeds: [
        {
          title: "üî¥ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          color: 0xff0000,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
              value: `\`\`\`
Email: ${email}
‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          },
          timestamp: new Date(),
        },
      ],
    });
    return res.status(500).json({ type: "error", message: "There was an error sending the email" });
  }
});

async function sendResetEmail(email, token) {
  const transporter = nodemailer.createTransport({
    host: "smtp.gmail.com",
    port: 587,
    secure: false,
    auth: {
      user: process.env.EMAIL_USER,
      pass: process.env.EMAIL_PASSWORD,
    },
  });

  const mailOptions = {
    from: '"AileenPF SHOP" <no-reply@example.com>',
    to: email,
    subject: "AileenPF SHOP - ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
    html: `
      <html>
      <head>
        <style>
          body {
            display: flex;
            align-items: center;
            justify-content: center;
            text-align: center;
            background-color: #ffffff;
          }
          .container {
            width: 100%;
            text-align: center;
            max-width: 500px;
            margin: 0 auto;
            border: 1px solid grey;
          }
          .logo {
            width: 100%;
            height: auto;
            object-fit: cover;
          }
          .content {
            font-size: 16px;
            color: #2f2f2f;
            margin: 25px auto;
          }
          .title {
            font-size: 28px;
            font-weight: bold;
            color: #3579ff;
            margin-bottom: 5px;
          }
          .text {
            font-weight: bold;
            color: #1a1a1a;
          }
          .link {
            margin-top: 15px;
            color: #1a1a1a;
          }
        </style>
      </head>
      <body>
        <div class="container">
          <img
            src="https://cdn.discordapp.com/attachments/1146425181103984750/1238140358932561971/Group_23.png?ex=663e3391&is=663ce211&hm=16de75860c54e9b290eb9593c9a73fec1eb170a8906adb724c0e6dede75f9dfa&"
            alt=""
            class="logo"
            draggable="false"
          />
          <div class="content">
            <div class="title">Password Reset</div>
            <p class="text">‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡πç‡∏≤‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì ‡πÇ‡∏õ‡∏£‡∏î‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà ‡∏°‡∏¥‡∏â‡∏∞‡∏ô‡∏±‡πâ‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡∏Å‡πÄ‡∏â‡∏¢‡∏ï‡πà‡∏≠‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÑ‡∏î‡πâ</p>
            <a href="http://localhost:5173/Reset-password?token=${token}" class="link">‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</a>
            <p>‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ú‡∏π‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏£‡∏∞‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏∏‡∏ì‡∏à‡∏≤‡∏Å AileenPF SHOP<br>¬© AileenPF SHOP 2024 ‡∏™‡∏á‡∏ß‡∏ô‡∏•‡∏¥‡∏Ç‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå.</p>
          </div>
        </div>
      </body>
      </html>
    `,
  };

  return transporter.sendMail(mailOptions);
}

app.post("/reset-password", async (req, res) => {
  let { email, password, confirmPassword, token } = req.body;

  try {
    if (!email || !password || !confirmPassword || !token) {
      return res.status(400).json({
        type: "error",
        message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
      });
    }

    if (password !== confirmPassword) {
      return res.status(400).json({
        type: "error",
        message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô",
      });
    }

    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(email)) {
      return res.status(400).json({
        type: "error",
        message: "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á",
      });
    }

    jwt.verify(token, process.env.JWT_SECRET_FORGOT, async (err, decoded) => {
      if (err) {
        return res.status(401).json({
          type: "error",
          message: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß",
        });
      }

      db.query("SELECT * FROM used_tokens WHERE token = ?", [token], async (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({
            type: "error",
            message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
          });
        }

        if (results.length > 0) {
          return res.status(400).json({
            type: "error",
            message: "‡πÇ‡∏ó‡πÄ‡∏Ñ‡πá‡∏ô‡∏ô‡∏µ‡πâ‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß",
          });
        }

        db.query("SELECT * FROM users WHERE email = ?", [email], async (error, results) => {
          if (error) {
            console.error(error);
            return res.status(500).json({
              type: "error",
              message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
            });
          }

          if (results.length === 0) {
            return res.status(404).json({
              type: "error",
              message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö",
            });
          }

          const hashedPassword = await bcrypt.hash(password, saltRounds);

          db.query("UPDATE users SET password = ? WHERE email = ?", [hashedPassword, email], (error) => {
            if (error) {
              console.error(error);
              return res.status(500).json({
                type: "error",
                message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
              });
            }

            db.query("INSERT INTO used_tokens (token) VALUES (?)", [token], (error) => {
              if (error) {
                console.error(error);
                return res.status(500).json({
                  type: "error",
                  message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô",
                });
              }

              // ‡∏™‡πà‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
              axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
                embeds: [
                  {
                    title: "üîë ‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                    description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                    color: 0x00ff00,
                    fields: [
                      {
                        name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                        value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${email}
Token: ${token}
\`\`\``,
                        inline: false,
                      },
                    ],
                    footer: {
                      text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
                    },
                    timestamp: new Date(),
                  },
                ],
              }).catch(error => {
                console.error("Error sending Discord notification:", error);
              });

              return res.status(200).json({
                type: "success",
                message: "‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
              });
            });
          });
        });
      });
    });
  } catch (error) {
    console.error(error);
    axios.post(process.env.DISCORD_WEBHOOK_SIGNIN, {
      embeds: [
        {
          title: "üî¥ ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          color: 0xff0000,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
              value: `\`\`\`
Email: ${email}
‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(error => {
      console.error("Error sending Discord notification:", error);
    });

    return res.status(500).json({
      type: "error",
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô",
    });
  }
});

/* Topups */

app.post("/angpro", (req, res) => {
  const { userId, urlAngpro } = req.body;

  if (!userId || !urlAngpro) {
    return res.status(400).json({ type: "error", message: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
  }

  twvoucher(process.env.MOBILE, urlAngpro)
    .then((redeemed) => {
      db.query("SELECT * FROM users WHERE id = ?", [userId], (err, results) => {
        if (err) {
          console.error("Error querying database:", err);
          return res
            .status(500)
            .json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }

        if (results.length === 0) {
          console.log("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà‡∏°‡∏µ id:", userId);
          return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }

        console.log("User found:", results[0]);

        const currentMoney = parseFloat(results[0].money);
        const additionalAmount = parseFloat(redeemed.amount);
        const newMoney = currentMoney + additionalAmount;
        const username = results[0].username;

        db.query(
          "UPDATE users SET money = ? WHERE id = ?",
          [newMoney, userId],
          (updateError) => {
            if (updateError) {
              console.error("Error updating user's money:", updateError);
              return res
                .status(500)
                .json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô" });
            }

            const updatedUser = {
              ...results[0],
              money: newMoney,
            };

            db.query(
              "INSERT INTO topups (user_id, username, type, amount) VALUES (?, ?, ?, ?)",
              [userId, username, "angpao", additionalAmount],
              (insertError) => {
                if (insertError) {
                  console.error("Error inserting top-up record:", insertError);
                  return res
                    .status(500)
                    .json({
                      type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
                    });
                }

                axios.post(process.env.DISCORD_WEBHOOK_TOPUPS, {
                  embeds: [
                    {
                      title: "üßß ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                      description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                      color: 0x00ff00,
                      fields: [
                        {
                          name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
                          value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${additionalAmount}
\`\`\``,
                          inline: false,
                        },
                      ],
                      footer: {
                        text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
                      },
                      timestamp: new Date(),
                    },
                  ],
                }).catch(error => {
                  console.error("Error sending Discord notification:", error);
                });

                return res.status(200).json({
                  type: "success",
                  message: "‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
                });
              }
            );
          }
        );
      });
    })
    .catch((err) => {
      console.error("Invalid voucher code:", err);
      return res
        .status(400)
        .json({ type: "error", message: "‡∏ã‡∏≠‡∏á‡∏≠‡∏±‡∏á‡πÄ‡∏õ‡∏≤‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡∏ñ‡∏π‡∏Å‡πÉ‡∏ä‡πâ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    });
});


app.post("/bank", upload.single("slip"), async (req, res) => {
  const { userId } = req.body;
  const slip = req.file;

  if (!userId || !slip) {
    return res.status(400).json({ type: "error", message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÅ‡∏ô‡∏ö‡∏™‡∏•‡∏¥‡∏õ‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô‡πÄ‡∏á‡∏¥‡∏ô" });
  }

  const lineNotifyToken = "VmTa3s5Bp5RamME7GPvSbDHccRiWIVotPIv1JpJPEPf";
  const branchId = "22166";
  const apiKey = "SLIPOK0CQO6PV";
  const localFilePath = path.resolve(__dirname, slip.path);
  const discordWebhookUrl = process.env.DISCORD_WEBHOOK_TOPUPS;

  try {
    // Process slip with SLIPOK API
    const form = new FormData();
    form.append("files", fs.createReadStream(localFilePath));
    form.append("log", "true");

    const response = await axios.post(
      `https://api.slipok.com/api/line/apikey/${branchId}`,
      form,
      {
        headers: {
          "x-authorization": apiKey,
          ...form.getHeaders(),
        },
      }
    );

    const slipData = response.data.data;
    const additionalAmount = parseFloat(slipData.amount);

    // Fetch user details
    const [userResults] = await db.promise().query("SELECT * FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const user = userResults[0];
    const currentMoney = parseFloat(user.money);
    const newMoney = currentMoney + additionalAmount;

    await db.promise().query("UPDATE users SET money = ? WHERE id = ?", [newMoney, userId]);

    await db.promise().query(
      "INSERT INTO topups (user_id, username, type, amount) VALUES (?, ?, ?, ?)",
      [userId, user.username, "bank", additionalAmount]
    );

    const successMessage = `‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡πÄ‡∏á‡∏¥‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô ${additionalAmount} ‡∏ö‡∏≤‡∏ó`;
    await axios.post(
      "https://notify-api.line.me/api/notify",
      `message=${encodeURIComponent(successMessage)}`,
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Authorization: `Bearer ${lineNotifyToken}`,
        },
      }
    );
    console.log("LINE Notify message sent successfully");

    await axios.post(discordWebhookUrl, {
      embeds: [
        {
          title: "üí∏ ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          color: 0x00ff00,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏á‡∏¥‡∏ô: ${additionalAmount} ‡∏ö‡∏≤‡∏ó
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
          },
          timestamp: new Date(),
        },
      ],
    });
    console.log("Discord notification sent successfully");

    return res.status(201).json({
      type: "success",
      message: `‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô: ${additionalAmount} ‡∏ö‡∏≤‡∏ó`,
      user: { ...user, money: newMoney },
    });
  } catch (error) {
    console.error("Error processing bank slip:", error);

    let user;
    try {
      const [userResults] = await db.promise().query("SELECT * FROM users WHERE id = ?", [userId]);
      if (userResults.length > 0) {
        user = userResults[0];
      }
    } catch (dbError) {
      console.error("Error fetching user for error notification:", dbError);
    }

    // Notify LINE about the error
    const errorMessage = `‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ: ${error.message}`;
    await axios.post(
      "https://notify-api.line.me/api/notify",
      `message=${encodeURIComponent(errorMessage)}`,
      {
        headers: {
          "Content-Type": "application/x-www-form-urlencoded",
          Authorization: `Bearer ${lineNotifyToken}`,
        },
      }
    ).catch(notifyErr => {
      console.error("Failed to send LINE Notify message:", notifyErr.message);
    });

    // Notify Discord about the error
    await axios.post(discordWebhookUrl, {
      embeds: [
        {
          title: "üö® ‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ",
          color: 0xff0000,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user ? user.username : userId}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£
\`\`\``,
              inline: false,
            },
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
              value: `\`\`\`
${error.message}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏ï‡∏¥‡∏°‡πÄ‡∏á‡∏¥‡∏ô",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(discordErr => {
      console.error("Failed to send Discord notification:", discordErr.message);
    });

    return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏™‡∏•‡∏¥‡∏õ", error: error.message });
  } finally {
    // Clean up local file
    if (fs.existsSync(localFilePath)) {
      fs.unlinkSync(localFilePath);
    }
  }
});



/* Get Data */

app.get("/users", async (req, res) => {
  try {
    db.query("SELECT * FROM users", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/products", async (req, res) => {
  try {
    db.query("SELECT * FROM products", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/data", async (req, res) => {
  try {
    db.query("SELECT * FROM data", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/topups", async (req, res) => {
  try {
    db.query("SELECT * FROM topups", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/category", async (req, res) => {
  try {
    db.query("SELECT * FROM category", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/sell", async (req, res) => {
  try {
    db.query("SELECT * FROM sell", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/topupgame", async (req, res) => {
  try {
    db.query("SELECT * FROM topupgame", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/events", async (req, res) => {
  try {
    db.query("SELECT * FROM events", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/historyevents", async (req, res) => {
  try {
    db.query("SELECT * FROM historyevent", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/reviews", async (req, res) => {
  try {
    db.query("SELECT * FROM reviews", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

app.get("/like", async (req, res) => {
  try {
    db.query("SELECT * FROM likeComment", (error, results) => {
      if (error) {
        console.error(error);
        return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
      }
      res.status(200).json(results);
    });
  } catch (error) {
    console.error(error);
    return res.status(401).json({ message: "Token ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
  }
});

/* Payment Product */

app.post("/payment", async (req, res) => {
  const { userId, userEmail, productId } = req.body;
  const statusProduct = 0;

  try {
    // Fetch user details
    const [userResults] = await db.promise().query("SELECT * FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const userMoney = Math.round(userResults[0].money * 100);
    const username = userResults[0].username;

    // Fetch product details
    const [productResults] = await db.promise().query("SELECT title, price, status FROM products WHERE product_id = ?", [productId]);
    if (productResults.length === 0) {
      return res.status(404).json({ type: "warning", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    const productPrice = Math.round(productResults[0].price * 100);
    const productStatus = productResults[0].status;
    const productName = productResults[0].title;

    if (productStatus === 0) {
      return res.status(400).json({ type: "warning", message: "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏à‡∏≥‡∏´‡∏ô‡πà‡∏≤‡∏¢‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß" });
    }

    if (userMoney < productPrice) {
      return res.status(400).json({ type: "warning", message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
    }

    // Fetch data related to the product
    const [dataResults] = await db.promise().query("SELECT password FROM data WHERE product_id = ?", [productId]);
    if (dataResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
    }

    const newMoney = userMoney - productPrice;
    await db.promise().query("UPDATE users SET money = ? WHERE id = ?", [newMoney / 100, userId]);
    await db.promise().query("UPDATE products SET status = ? WHERE product_id = ?", [statusProduct, productId]);
    const { password } = dataResults[0];
    await db.promise().query(
      "INSERT INTO sell (user_id, product_id, payment, email, username, password) VALUES (?, ?, ?, ?, ?, ?)",
      [userId, productId, productPrice / 100, userEmail, username, password]
    );

    const [finalUserResults] = await db.promise().query("SELECT * FROM users WHERE id = ?", [userId]);

    axios.post(process.env.DISCORD_WEBHOOK_SALES, {
      embeds: [
        {
          title: "üí∏ ‡∏™‡∏±‡πà‡∏á‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
          color: 0x00ff00,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productName}
‡∏£‡∏≤‡∏Ñ‡∏≤‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productPrice / 100} ‡∏ö‡∏≤‡∏ó
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏£‡∏∞‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(error => {
      console.error("Error sending Discord notification:", error);
    });

    return res.status(201).json({
      message: "‡∏ã‡∏∑‡πâ‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
      user: finalUserResults[0],
    });
  } catch (error) {
    console.error(error);
    return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
  }
});


/* Spin Wheel */

app.post("/Spin", async (req, res) => {
  const { userId } = req.body;
  const price = 3000;

  try {
    await db.promise().query("START TRANSACTION");

    const [userResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);

    if (userResults.length === 0) {
      await db.promise().query("ROLLBACK");
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const userMoney = Math.round(userResults[0].money * 100);

    if (userMoney < price) {
      await db.promise().query("ROLLBACK");
      return res.status(400).json({ type: "warning", message: "‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠" });
    }

    const newMoney = userMoney - price;
    await db
      .promise()
      .query("UPDATE users SET money = ? WHERE id = ?", [
        newMoney / 100,
        userId,
      ]);

    const [finalUserResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);

    await db.promise().query("COMMIT");

    return res.status(201).json({
      type: "success",
      message: "‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡πÇ‡∏ä‡∏Ñ‡∏î‡∏µ",
      user: finalUserResults[0],
    });
  } catch (error) {
    console.error(error);

    await db.promise().query("ROLLBACK");

    return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
  }
});

/* Reward Wheel */

app.post("/reward", async (req, res) => {
  const { userId, reward } = req.body;
  const type = 'wheel';

  try {
    await db.promise().query("START TRANSACTION");

    const [userResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);

    if (userResults.length === 0) {
      await db.promise().query("ROLLBACK");
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const user = userResults[0];
    const userMoney = Math.round(user.money * 100);
    const newMoney = userMoney + Math.round(reward * 100);

    await db
      .promise()
      .query("UPDATE users SET money = ? WHERE id = ?", [
        newMoney / 100,
        userId,
      ]);

    await db
      .promise()
      .query("INSERT INTO historyevent (user_id, type, price, reward) VALUES (?, ?, ?, ?)", [
        userId,
        type,
        30,
        reward,
      ]);

    const [finalUserResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);

    await db.promise().query("COMMIT");

    axios.post(process.env.DISCORD_WEBHOOK_EVENTS, {
      embeds: [
        {
          title: "‚ú® ‡∏Å‡∏¥‡∏à‡∏Å‡∏Å‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡πà‡∏ô‡∏Å‡∏¥‡∏à‡∏£‡∏£‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
          color: 0x00ff00,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏´‡∏°‡∏∏‡∏ô‡∏ß‡∏á‡∏•‡πâ‡∏≠",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${user.username}
‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: ${type}
‡∏£‡∏≤‡∏Ñ‡∏≤: 30 ‡∏ö‡∏≤‡∏ó
‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•: ${reward} ‡∏ö‡∏≤‡∏ó
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏™‡∏∏‡πà‡∏°‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏•‡∏∞ 30 ‡∏ö‡∏≤‡∏ó",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(error => {
      console.error("Error sending Discord notification:", error);
    });

    return res.status(201).json({
      type: "success",
      message: "‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏î‡πâ‡∏ß‡∏¢! ‡∏£‡∏≤‡∏á‡∏ß‡∏±‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß",
      user: finalUserResults[0],
    });
  } catch (error) {
    console.error(error);

    await db.promise().query("ROLLBACK");

    return res.status(500).json({ type: "error", message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
  }
});



/* comment */

app.post("/addComment", async (req, res) => {
  const { userId, productId, comment } = req.body;

  try {
    // Check if user exists
    const [userResults] = await db.promise().query("SELECT username FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const username = userResults[0].username;

    // Check if product exists
    const [productResults] = await db.promise().query("SELECT title FROM products WHERE product_id = ?", [productId]);
    const productName = productResults.length > 0 ? productResults[0].title : "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤";

    // Insert review
    await db.promise().query(
      "INSERT INTO reviews (user_id, product_id, comment) VALUES (?, ?, ?)",
      [userId, productId, comment]
    );

    await axios.post(process.env.DISCORD_WEBHOOK_REVIEW, {
      embeds: [
        {
          title: "üìù ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
          color: 0x00ff00,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤: ${productName}
‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: ${comment}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
          },
          timestamp: new Date(),
        },
      ],
    });

    return res.status(201).json({
      type: "success",
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });

  } catch (error) {
    console.error("Error in /addComment:", error);

    return res.status(500).json({
      type: "error",
      message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  }
});


app.post("/removeComment", async (req, res) => {
  const { userId, commentId } = req.body;

  try {
    const [userResults] = await db.promise().query("SELECT username FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    const username = userResults[0].username;

    const [commentResults] = await db.promise().query("SELECT * FROM reviews WHERE id = ? AND user_id = ?", [commentId, userId]);
    if (commentResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö" });
    }

    const comment = commentResults[0].comment;

    await db.promise().query("DELETE FROM likecomment WHERE comment_id = ?", [commentId]);

    await db.promise().query("DELETE FROM reviews WHERE id = ? AND user_id = ?", [commentId, userId]);

    await axios.post(process.env.DISCORD_WEBHOOK_REVIEW, {
      embeds: [
        {
          title: "üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
          description: "‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
          color: 0xff0000,
          fields: [
            {
              name: "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
              value: `\`\`\`
‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: ${username}
‡∏£‡∏µ‡∏ß‡∏¥‡∏ß: ${comment}
\`\`\``,
              inline: false,
            },
          ],
          footer: {
            text: "‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß",
          },
          timestamp: new Date(),
        },
      ],
    }).catch(error => {
      console.error("Error sending Discord notification:", error);
    });

    return res.status(200).json({
      type: "success",
      message: "‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });

  } catch (error) {
    console.error("Error in /removeComment:", error);

    return res.status(500).json({
      type: "error",
      message: "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ",
    });
  }
});


app.post("/addLike", async (req, res) => {
  const { userId, commentId } = req.body;

  try {
    const [userResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    await db
      .promise()
      .query(
        "INSERT INTO likeComment (user_id, comment_id) VALUES (?, ?)",
        [userId, commentId]
      );

    return res.status(201).json({
      type: "success",
      message: "‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });

  } catch (error) {
    console.error(error);

    return res.status(201).json({
      type: "error",
      message: "‡∏Å‡∏î‡πÑ‡∏•‡∏Ñ‡πå‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  }
});

app.post("/removeLike", async (req, res) => {
  const { userId, commentId } = req.body;

  try {
    const [userResults] = await db
      .promise()
      .query("SELECT * FROM users WHERE id = ?", [userId]);
    if (userResults.length === 0) {
      return res.status(404).json({ type: "error", message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
    }

    await db
      .promise()
      .query(
        "DELETE FROM likeComment WHERE user_id = ? AND comment_id = ?",
        [userId, commentId]
      );

    return res.status(200).json({
      type: "success",
      message: "‡πÄ‡∏≠‡∏≤‡πÑ‡∏•‡∏Ñ‡πå‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });

  } catch (error) {
    console.error(error);

    return res.status(500).json({
      type: "error",
      message: "‡πÄ‡∏≠‡∏≤‡πÑ‡∏•‡∏Ñ‡πå‡∏≠‡∏≠‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
    });
  }
});


/* Admin */

const crypto = require('crypto');

app.post("/add-product", async (req, res) => {
  const {
    title,
    detail,
    category,
    price,
    username,
    password,
    image1,
    image2,
    image3,
    image4,
    image5,
    image6,
    status,
    newProduct,
    recommendProduct,
  } = req.body;

  try {
    if (!title || !detail || !category || !price || !username || !password) {
      return res.status(400).json({
        message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
      });
    }

    const productId = crypto.randomInt(100000000, 1000000000);

    db.query(
      "INSERT INTO products (product_id, image1, image2, image3, image4, image5, image6, title, detail, category, price, new, recommend, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
      [
        productId,
        image1,
        image2,
        image3,
        image4,
        image5,
        image6,
        title,
        detail,
        category,
        price,
        newProduct,
        recommendProduct,
        status,
      ],
      (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        db.query(
          "INSERT INTO data (product_id, username, password) VALUES (?, ?, ?)",
          [productId, username, password],
          (error, results) => {
            if (error) {
              console.error(error);
              return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
            }

            return res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" });
          }
        );
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
  }
});

app.post("/update-product", async (req, res) => {
  const {
    title,
    detail,
    category,
    price,
    username,
    password,
    image1,
    image2,
    image3,
    image4,
    image5,
    image6,
    status,
    newProduct,
    recommendProduct,
  } = req.body;

  try {

    const productId = crypto.randomInt(100000000, 1000000000);

    db.query(
      "UPDATE products (product_id, image1, image2, image3, image4, image5, image6, title, detail, category, price, new, recommend, status) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)",
      [
        productId,
        image1,
        image2,
        image3,
        image4,
        image5,
        image6,
        title,
        detail,
        category,
        price,
        newProduct,
        recommendProduct,
        status,
      ],
      (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        db.query(
          "UPDATE data (product_id, username, password) VALUES (?, ?, ?)",
          [productId, username, password],
          (error, results) => {
            if (error) {
              console.error(error);
              return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
            }

            return res.status(201).json({ message: "‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" });
          }
        );
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
  }
});

app.post("/delete-product", async (req, res) => {
  const { productId } = req.body;

  try {
    if (!productId) {
      return res.status(400).json({
        message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
      });
    }

    db.query(
      "DELETE FROM products WHERE id = ?",
      [productId],
      (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }
        return res.status(201).json({ message: "‡∏•‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" });
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤" });
  }
});
app.post("/delete-user", async (req, res) => {
  const { userId } = req.body;

  try {
    if (!userId) {
      return res.status(400).json({
        message: "‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö",
      });
    }

    db.query(
      "DELETE FROM users WHERE id = ?",
      [userId],
      (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }
        return res.status(201).json({ message: "‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô" });
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
  }
});



app.post("/update-user", async (req, res) => {
  const { userId, urole, money } = req.body;

  try {
    db.query(
      "SELECT * FROM users WHERE id = ?",
      [userId],
      async (error) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        db.query(
          "UPDATE users SET urole = ?, money = ? WHERE id = ?",
          [urole, money, userId],
          (error) => {
            if (error) {
              console.error(error);
              return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
            }

            db.query(
              "SELECT * FROM users WHERE id = ?",
              [userId],
              (error) => {
                if (error) {
                  console.error(error);
                  return res
                    .status(500)
                    .json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
                }

                return res.status(200).json({
                  message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß"
                });
              }
            );
          }
        );
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

app.post("/change-user", async (req, res) => {
  const { userId, selectedProfile, username, email, password } = req.body;

  try {
    db.query(
      "SELECT * FROM users WHERE id = ?",
      [userId],
      async (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        if (results.length === 0) {
          return res
            .status(401)
            .json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const user = results[0];

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
          return res
            .status(401)
            .json({ message: "‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏´‡∏£‡∏∑‡∏≠‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        db.query(
          "UPDATE users SET profile = ?, username = ?, email = ? WHERE id = ?",
          [selectedProfile, username, email, userId],
          (error) => {
            if (error) {
              console.error(error);
              return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
            }

            db.query(
              "SELECT * FROM users WHERE id = ?",
              [userId],
              (error, updatedResults) => {
                if (error) {
                  console.error(error);
                  return res
                    .status(500)
                    .json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
                }

                const updatedUser = updatedResults[0];
                return res.status(200).json({
                  message: "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß",
                  user: updatedUser,
                });
              }
            );
          }
        );
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•" });
  }
});

app.post("/change-password", async (req, res) => {
  const { userId, password_n, password_c, password } = req.body;

  if (password_n !== password_c) {
    return res.status(400).json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô" });
  }

  try {
    db.query(
      "SELECT * FROM users WHERE id = ?",
      [userId],
      async (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        if (results.length === 0) {
          return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ" });
        }

        const user = results[0];

        const isPasswordValid = await bcrypt.compare(password, user.password);
        if (!isPasswordValid) {
          return res
            .status(401)
            .json({ message: "‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
        }

        const hashedNewPassword = await bcrypt.hash(password_n, 10);

        db.query(
          "UPDATE users SET password = ? WHERE id = ?",
          [hashedNewPassword, userId],
          (error) => {
            if (error) {
              console.error(error);
              return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
            }

            return res
              .status(200)
              .json({ message: "‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß" });
          }
        );
      }
    );
  } catch (error) {
    console.error(error);
    return res
      .status(500)
      .json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô" });
  }
});

app.post("/reload", async (req, res) => {
  const { ReloadId } = req.body;

  try {
    db.query(
      "SELECT * FROM users WHERE id = ?",
      [ReloadId],
      async (error, results) => {
        if (error) {
          console.error(error);
          return res.status(500).json({ message: "‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡∏∂‡πâ‡∏ô" });
        }

        if (results.length === 0) {
          return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏" });
        }

        const user = results[0];

        res.status(200).json({ message: "‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", user: user });
      }
    );
  } catch (error) {
    console.error(error);
    return res.status(500).json({ message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏£‡∏µ‡πÇ‡∏´‡∏•‡∏î" });
  }
});


const dataFilePath = path.join(__dirname, 'channelData.json');

function saveChannelData(guildId, channelId, type, channelNameInput) {
  const data = {
    guildId,
    channelId,
    type,
    channelNameInput
  };
  fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));
}

function loadChannelData() {
  if (fs.existsSync(dataFilePath)) {
    const data = fs.readFileSync(dataFilePath);
    return JSON.parse(data);
  }
  return null;
}


const { Client, IntentsBitField, PermissionsBitField } = require('discord.js');
const { SlashCommandBuilder, EmbedBuilder } = require('@discordjs/builders');

const client = new Client({
  intents: [
    IntentsBitField.Flags.Guilds,
    IntentsBitField.Flags.GuildMessages,
    IntentsBitField.Flags.MessageContent,
    IntentsBitField.Flags.GuildMessageTyping,
    IntentsBitField.Flags.GuildMessageReactions,
    IntentsBitField.Flags.GuildMembers,
    IntentsBitField.Flags.GuildVoiceStates
  ]
});

client.once('ready', async () => {
  console.log(`${client.user.tag} is ready!`);

  const guildId = process.env.DISCORD_GUILDID;
  const guild = client.guilds.cache.get(guildId);

  if (!guild) {
    console.error('Guild not found.');
    return;
  }

  const allMemberChannelId = '1275655904158679051';
  const memberChannelId = '1275656125123133453';
  const botChannelId = '1275656272191946835';
  const roleId = '1175833756087615518';

  const updateChannels = async () => {
    try {
      await guild.members.fetch();

      const humanMembers = guild.members.cache.filter(member => !member.user.bot).size;
      const botMembers = guild.members.cache.filter(member => member.user.bot).size;

      const role = guild.roles.cache.get(roleId);
      if (!role) {
        console.error(`Role with ID ${roleId} not found.`);
        return;
      }

      const roleMembers = role.members.filter(member => !member.user.bot).size;

      const updateChannel = async (channelId, name, channelDescription) => {
        const channel = guild.channels.cache.get(channelId);
        if (channel) {
          await channel.setName(name);
        } else {
          console.error(`${channelDescription} Channel ${channelId} not found.`);
        }
      };

      await Promise.all([
        updateChannel(allMemberChannelId, `‚ïè‚ÇäÀöüíøÔπïùêÄùê•ùê• ùêåùêûùê¶ùêõùêûùê´ùê¨: ${humanMembers}`, 'All Members'),
        updateChannel(memberChannelId, `‚ïè‚ÇäÀöüìÄÔπïùêåùêûùê¶ùêõùêûùê´ùê¨: ${roleMembers}`, 'Members'),
        updateChannel(botChannelId, `‚ïè‚ÇäÀöü§ñÔπïùêÅùêéùêìùê¨: ${botMembers}`, 'Bots')
      ]);

    } catch (error) {
      console.error('Error updating channels:', error);
    }
  };

  setInterval(updateChannels, 60000);

  // Event listeners for member updates
  client.on('guildMemberAdd', updateChannels);
  client.on('guildMemberRemove', updateChannels);
  client.on('guildMemberUpdate', updateChannels);

  // Initial update when the bot starts
  updateChannels();
});

client.on('interactionCreate', async (interaction) => {
  if (!interaction.isCommand()) return;

  const { commandName } = interaction;

  if (commandName === 'stats') {
    await interaction.deferReply({ ephemeral: true });

    const guild = interaction.guild;
    const type = interaction.options.getString('type');
    const channelNameInput = interaction.options.getString('channelname');

    try {
      const newChannel = await guild.channels.create({
        name: channelNameInput,
        type: 2, // Voice channel
        permissionOverwrites: [
          {
            id: guild.roles.everyone,
            allow: [PermissionsBitField.Flags.ViewChannel],
            deny: [
              PermissionsBitField.Flags.Connect,
              PermissionsBitField.Flags.Speak
            ],
          }
        ]
      });

      const channelInfo = { channelId: newChannel.id, type, channelNameInput };
      channelsToUpdate.push(channelInfo);
      saveChannelData(guild.id, newChannel.id, type, channelNameInput);

      await interaction.editReply({ content: `‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á ${newChannel.name} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!` });
    } catch (error) {
      console.error('Error creating channel:', error);
      await interaction.editReply({ content: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ä‡πà‡∏≠‡∏á.' });
    }
  }
});

client.on('guildMemberAdd', async member => {
  const welcomeChannelId = '1175823543955636333';
  const welcomeMessage = '‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå!';
  const channel = member.guild.channels.cache.get(welcomeChannelId);

  if (!channel) {
    console.error('Channel not found.');
    return;
  }

  const embed = new EmbedBuilder()
    .setTitle("‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä ùì¶ùìÆùìµùì¨ùì∏ùì∂ùìÆ üíå Àö‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä")
    .setDescription(`**‡∏™‡∏ß‡∏±‡∏™‡∏î‡∏µ ${member.user.username}! ${welcomeMessage}**`)
    .setImage('https://cdn.discordapp.com/attachments/1275416004381380609/1275416087575400541/received_2758242251063419.gif')
    .setColor(0x00FF00)
    .setFooter({ text: '‡∏Ç‡∏≠‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡πà‡∏ß‡∏°!' })
    .setThumbnail(member.user.displayAvatarURL())
    .setTimestamp();

  try {
    await channel.send({ embeds: [embed] });
  } catch (error) {
    console.error('Error sending welcome message:', error);
  }
});

client.on('guildMemberRemove', async member => {
  const byeChannelId = '1275420770205433857';
  const channel = member.guild.channels.cache.get(byeChannelId);

  if (!channel) {
    console.error('Channel not found.');
    return;
  }

  const embed = new EmbedBuilder()
    .setTitle("‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä ùìñùì∏ùì∏ùì≠ ùì´ùîÇùìÆ üëã Àö‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä‚Çä")
    .setDescription(`**‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å ${member.user.username} ‡πÑ‡∏î‡πâ‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå**`)
    .setImage('https://cdn.discordapp.com/attachments/1275416004381380609/1275416087575400541/received_2758242251063419.gif')
    .setColor(0xFF0000)
    .setFooter({ text: '‡πÄ‡∏£‡∏≤‡∏´‡∏ß‡∏±‡∏á‡∏ß‡πà‡∏≤‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏û‡∏ö‡∏Ñ‡∏∏‡∏ì‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á!' })
    .setThumbnail(member.user.displayAvatarURL())
    .setTimestamp();

  try {
    await channel.send({ embeds: [embed] });
  } catch (error) {
    console.error('Error sending leave message:', error);
  }
});

app.listen(3002, () => {
  console.log(`Server is running...`);
});
